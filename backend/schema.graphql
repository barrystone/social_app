### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type LikedStory {
  id: Int!
  likedAt: DateTime!
  story: Story
  user: User
}

type Mutation {
  createDraft(data: PostCreateInput!): Post
  createProfile(avatar: String, bio: String, id: Int, location: String, website: String): Profile
  createStory(content: String): Story
  deletePost(id: Int!): Post
  incrementPostViewCount(id: Int!): Post
  likeStory(id: Int): LikedStory
  login(email: String!, password: String!): AuthPayload
  signup(email: String!, name: String, password: String!): AuthPayload
  togglePublishPost(id: Int!): Post
  updateProfile(avatar: String, bio: String, id: Int, location: String, website: String): Profile
}

type Post {
  author: User
  content: String
  createdAt: DateTime!
  id: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
  viewCount: Int!
}

input PostCreateInput {
  content: String
  title: String!
}

input PostOrderByUpdatedAtInput {
  updatedAt: SortOrder!
}

type Profile {
  avatar: String
  bio: String
  createdAt: DateTime!
  id: Int!
  location: String
  user: User
  userId: String
  website: String
}

type Query {
  allStorys: [Story]
  allUsers: [User!]!
  draftsByUser(userUniqueInput: UserUniqueInput!): [Post]
  feed(orderBy: PostOrderByUpdatedAtInput, searchString: String, skip: Int, take: Int): [Post!]!
  me: User
  postById(id: Int): Post
  story(id: Int): Story
}

enum SortOrder {
  asc
  desc
}

type Story {
  author: User
  content: String
  createdAt: DateTime!
  id: Int!
  likes: [LikedStory]
}

type User {
  email: String!
  id: String!
  likedStories: [LikedStory]
  name: String
  posts: [Post]
  profile: Profile
  stories: [Story]
}

input UserCreateInput {
  email: String!
  name: String
  posts: [PostCreateInput!]
}

input UserUniqueInput {
  email: String
  id: String
}
